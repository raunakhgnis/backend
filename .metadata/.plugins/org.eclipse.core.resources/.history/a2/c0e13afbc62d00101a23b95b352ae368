package com.example.simpleauction.controller;

import com.example.simpleauction.dto.AddItemRequest;
import com.example.simpleauction.dto.BidRequest;
import com.example.simpleauction.dto.ItemDTO;
import com.example.simpleauction.dto.MessageResponse;
import com.example.simpleauction.service.AuthService;
import com.example.simpleauction.service.BidService;
import com.example.simpleauction.service.ItemService;
import jakarta.persistence.EntityNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map; // Needed for AuthService activeTokens access
import com.example.simpleauction.entity.User;
import com.example.simpleauction.repository.UserRepository;
import com.example.simpleauction.service.PaymentService; // Inject PaymentService
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import com.razorpay.Utils; // For webhook verification
import org.json.JSONObject; // For parsing webhook payload
import org.springframework.beans.factory.annotation.Value; // For webhook secret
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map; // For webhook payload map

@RestController
//@RequestMapping("/api/items")
public class ItemController {
     private static final Logger logger = LoggerFactory.getLogger(ItemController.class);

    private final ItemService itemService;
    private final AuthService authService;
    private final BidService bidService;
    private final PaymentService paymentService;
    private final UserRepository userRepository; // Needed to get User entity
    
    @Value("${razorpay.webhook.secret}") 
    private String webhookSecret;
    
    public ItemController(ItemService itemService, AuthService authService, BidService bidService,
            PaymentService paymentService, UserRepository userRepository) {
    		this.itemService = itemService;
    		this.authService = authService;
    		this.bidService = bidService;
    		this.paymentService = paymentService;
    		this.userRepository = userRepository;
    }

    // GET /api/items (Handles all, category, search)
    @GetMapping
    public ResponseEntity<List<ItemDTO>> getItems(
            @RequestParam(required = false) String category,
            @RequestParam(required = false) String search) { // Renamed from 'term' for clarity
        logger.info("Request received for items. Category: '{}', Search: '{}'", category, search);
        if (category != null && !category.isBlank()) {
             logger.debug("Fetching items by category: {}", category);
            return ResponseEntity.ok(itemService.getItemsByCategory(category));
        } else if (search != null && !search.isBlank()) {
             logger.debug("Searching items with term: {}", search);
             return ResponseEntity.ok(itemService.searchItems(search));
        } else {
             logger.debug("Fetching all items.");
            return ResponseEntity.ok(itemService.getAllItems());
        }
    }

    // GET /api/items/{id}
    @GetMapping("/{id}")
    public ResponseEntity<?> getItemById(@PathVariable Long id) {
        logger.debug("Request received for item ID: {}", id);
         return itemService.getItemDtoById(id)
                .<ResponseEntity<?>>map(ResponseEntity::ok)
                .orElseGet(() -> {
                     logger.warn("Item not found with ID: {}", id);
                     return ResponseEntity.status(HttpStatus.NOT_FOUND)
                                      .body(new MessageResponse("Item not found with ID: " + id));
                });
    }

    // POST /api/items (Add new item)
    @PostMapping
    public ResponseEntity<?> addItem(
            @RequestBody AddItemRequest addItemRequest,
            @RequestHeader("Authorization") String token
            ) {
         logger.info("Request received to add new item: {}", addItemRequest.getName()); // Don't log full request easily if sensitive
         // Simple Auth Check
        String userEmail = authService.getUserEmailFromToken(token); // Use helper method if created in AuthService
         if (userEmail == null) {
              logger.warn("Unauthorized attempt to add item. Invalid token provided.");
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid session."));
         }

        try {
            ItemDTO createdItem = itemService.createItem(addItemRequest, userEmail);
            logger.info("Successfully added item ID: {}, Name: {}", createdItem.getId(), createdItem.getName());
            return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
        } catch (EntityNotFoundException e) {
             logger.warn("Failed to add item. Reason: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (IllegalArgumentException e) {
             logger.warn("Failed to add item due to invalid argument. Reason: {}", e.getMessage());
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (Exception e) {
             logger.error("Internal error adding item.", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to add item due to an internal error."));
        }
    }

    // POST /api/items/{id}/bid
     @PostMapping("/{id}/bid")
    public ResponseEntity<?> placeBid(
            @PathVariable Long id,
            @RequestBody BidRequest bidRequest, // Assuming BidRequest has BigDecimal amount
            @RequestHeader("Authorization") String token
         ) {
        logger.info("Request received to place bid on item ID: {}", id);
        // Simple Auth Check
        String userEmail = authService.getUserEmailFromToken(token); // Use helper method
         if (userEmail == null) {
              logger.warn("Unauthorized attempt to bid on item ID: {} (Invalid Token)", id);
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid session."));
         }

        try {
            // Pass item ID, request body (contains amount), and bidder's email
            return ResponseEntity.ok(bidService.placeBid(id, bidRequest, userEmail));
        } catch (EntityNotFoundException e) {
             logger.warn("Failed to place bid on item ID: {}. Item not found.", id);
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new MessageResponse(e.getMessage()));
        } catch (IllegalArgumentException | IllegalStateException e) {
             logger.warn("Failed to place bid on item ID: {}. Reason: {}", id, e.getMessage());
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (Exception e) {
             logger.error("Internal error placing bid on item ID: {}", id, e);
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to place bid due to an internal error."));
        }
    }

     // GET /api/items/{id}/bids
    @GetMapping("/{id}/bids")
    public ResponseEntity<?> getBidsForItem(@PathVariable Long id) {
         logger.debug("Request received for bids for item ID: {}", id);
        try {
            // Note: Bids might contain sensitive user info, consider filtering in DTO if needed
            return ResponseEntity.ok(bidService.getBidsForItem(id));
        } catch (Exception e) {
             logger.error("Failed to retrieve bids for item ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to retrieve bids."));
        }
    }

    // --- NEW Payment Endpoint ---
    @PostMapping("/{id}/pay")
    public ResponseEntity<?> initiatePayment(
            @PathVariable Long id,
            @RequestHeader("Authorization") String token
    ) {
        logger.info("Received payment initiation request for item ID: {}", id);
         // Simple Auth Check
        String userEmail = authService.getUserEmailFromToken(token); // Use helper method
         if (userEmail == null) {
              logger.warn("Unauthorized payment attempt for item ID: {} (Invalid Token)", id);
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid session."));
         }

        try {
            boolean success = itemService.initiatePayment(id, userEmail);
            if (success) {
                 logger.info("Payment simulation successful for item ID: {}", id);
                // You could optionally return the updated ItemDTO here
                return ResponseEntity.ok(new MessageResponse("Payment successful (simulated). Item status updated."));
            } else {
                 logger.warn("Payment simulation failed for item ID: {}", id);
                return ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED) // 402 Payment Required might be suitable
                                 .body(new MessageResponse("Payment failed (simulated). Please try again or contact support."));
            }
        } catch (EntityNotFoundException e) {
            logger.error("Payment attempt failed for item ID: {}. Item not found.", id);
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new MessageResponse(e.getMessage()));
        } catch (IllegalArgumentException | IllegalStateException e) {
             logger.warn("Payment attempt validation failed for item ID: {}. Reason: {}", id, e.getMessage());
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (Exception e) {
             logger.error("Internal error during payment simulation for item ID: {}", id, e);
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Payment initiation failed due to an internal error."));
        }
    }
    
    @PostMapping("/api/items/{id}/create-razorpay-order") // Changed endpoint name
    public ResponseEntity<?> createRazorpayOrder(
            @PathVariable Long id,
            @RequestHeader("Authorization") String token
    ) {
        logger.info("Request to create Razorpay order for item ID: {}", id);
        String userEmail = authService.getUserEmailFromToken(token);
        if (userEmail == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid session."));
        }

        User user = userRepository.findByEmail(userEmail)
                .orElse(null); // Or throw exception if user must exist (should)
        if (user == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("User not found."));
        }

        try {
            String razorpayOrderId = paymentService.createRazorpayOrder(id, user);
            // Return Key ID and Order ID to frontend
            JSONObject response = new JSONObject();
            response.put("keyId", razorpayClient.getKeyId()); // Assuming razorpayClient is accessible or keyId is stored
            response.put("orderId", razorpayOrderId);
            response.put("amount", itemService.getItemEntityById(id).getCurrentBidPrice().multiply(new BigDecimal("100")).intValue()); // send amount again
            response.put("currency", "INR");
            // Add prefill details if needed for Razorpay checkout
            response.put("prefillName", user.getEmail()); // Example
            response.put("prefillEmail", user.getEmail());
            // response.put("prefillContact", "9999999999");

            return ResponseEntity.ok(response.toString()); // Send as JSON string
        } catch (RazorpayException e) {
            logger.error("Razorpay Error creating order for item ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Error creating payment order: " + e.getMessage()));
        } catch (EntityNotFoundException | IllegalArgumentException | IllegalStateException e) {
            logger.warn("Validation failed for Razorpay order creation. Item ID: {}, Reason: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        }
    }

    // --- NEW Webhook Endpoint for Razorpay ---
    @PostMapping("/api/webhooks/razorpay")
    public ResponseEntity<?> handleRazorpayWebhook(
            @RequestBody String payload,
            @RequestHeader("X-Razorpay-Signature") String receivedSignature
    ) {
        logger.info("Razorpay Webhook received.");
        try {
            // 1. Verify Signature (CRUCIAL for security)
            // Ensure webhookSecret is configured in application.properties
            boolean isValidSignature = Utils.verifyWebhookSignature(payload, receivedSignature, webhookSecret);

            if (!isValidSignature) {
                logger.warn("Invalid Razorpay webhook signature received.");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid signature");
            }

            // 2. Parse Payload
            JSONObject event = new JSONObject(payload);
            String eventType = event.getString("event");
            JSONObject paymentEntity = event.getJSONObject("payload").getJSONObject("payment").getJSONObject("entity");
            String razorpayOrderId = paymentEntity.getString("order_id");
            String razorpayPaymentId = paymentEntity.getString("id");


            logger.info("Webhook event type: {}, Razorpay Order ID: {}", eventType, razorpayOrderId);

            // 3. Handle Event Type
            if ("payment.captured".equals(eventType) || "order.paid".equals(eventType)) { // Handle payment success
                paymentService.handlePaymentSuccess(razorpayOrderId, razorpayPaymentId, receivedSignature);
            } else if ("payment.failed".equals(eventType)) { // Handle payment failure
                String description = paymentEntity.optString("description", "Payment failed");
                paymentService.handlePaymentFailure(razorpayOrderId, description);
            } else {
                logger.info("Received unhandled Razorpay event type: {}", eventType);
            }

            return ResponseEntity.ok("Webhook processed");

        } catch (RazorpayException e) {
            logger.error("RazorpayException during webhook processing: ", e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error processing webhook: " + e.getMessage());
        } catch (Exception e) {
             logger.error("Unexpected error during webhook processing: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal server error");
        }
    }

    // Helper for getting Razorpay Key ID, or store it in PaymentService and access via getter
    @Value("${razorpay.key.id}")
    private String razorpayKeyId; // Used to send to frontend for checkout options

    // Make razorpayClient available (if needed, or keyId)
    // This is a bit messy, better to have keyId in PaymentService and expose it
    private final RazorpayClient razorpayClient; // Assuming this is initialized somewhere, like in PaymentService constructor
    // You might need to pass razorpayKeyId to PaymentService if it's not already constructing the client
}


