package com.example.simpleauction.controller;

import com.example.simpleauction.dto.AddItemRequest;
import com.example.simpleauction.dto.BidRequest;
import com.example.simpleauction.dto.ItemDTO;
import com.example.simpleauction.dto.MessageResponse; // Add this
import com.example.simpleauction.service.AuthService; // Keep for simple token check
import com.example.simpleauction.service.BidService;
import com.example.simpleauction.service.ItemService;
import jakarta.persistence.EntityNotFoundException; // Add this
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
// Import security annotations if using Spring Security later
// import org.springframework.security.access.prepost.PreAuthorize;
// import org.springframework.security.core.annotation.AuthenticationPrincipal;
// import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.security.Principal; // Use this for simple auth identification
import java.util.List;

@RestController
@RequestMapping("/api/items")
public class ItemController {

    private final ItemService itemService;
    private final AuthService authService; // Keep for simple token check
    private final BidService bidService; // Inject BidService


    public ItemController(ItemService itemService, AuthService authService, BidService bidService) {
        this.itemService = itemService;
        this.authService = authService;
        this.bidService = bidService;
    }

    @GetMapping
    public ResponseEntity<List<ItemDTO>> getItems(
            @RequestParam(required = false) String category,
            @RequestParam(required = false) String search) {
        if (category != null && !category.isBlank()) {
            return ResponseEntity.ok(itemService.getItemsByCategory(category));
        } else if (search != null && !search.isBlank()) {
             return ResponseEntity.ok(itemService.searchItems(search));
        } else {
            return ResponseEntity.ok(itemService.getAllItems());
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getItemById(@PathVariable Long id) {
         return itemService.getItemDtoById(id)
                .<ResponseEntity<?>>map(ResponseEntity::ok) // If found, wrap DTO in OK
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND)
                                         .body(new MessageResponse("Item not found with ID: " + id)));
    }

     // Kept separate for clarity, could merge with above GET /api/items
    @GetMapping("/category/{categoryName}")
    public ResponseEntity<List<ItemDTO>> getItemsByCategory(@PathVariable String categoryName) {
        return ResponseEntity.ok(itemService.getItemsByCategory(categoryName));
    }

    // Kept separate for clarity
    @GetMapping("/search")
    public ResponseEntity<List<ItemDTO>> searchItems(@RequestParam String term) {
         return ResponseEntity.ok(itemService.searchItems(term));
    }

    @PostMapping
    // Add security later: @PreAuthorize("isAuthenticated()")
    public ResponseEntity<?> addItem(
            @RequestBody AddItemRequest addItemRequest,
            @RequestHeader("Authorization") String token // Using simple token auth for demo
            // For Spring Security: Principal principal OR @AuthenticationPrincipal UserDetails userDetails
            ) {
         // Simple Auth Check - Replace with Spring Security later
        if (!authService.isValidToken(token)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Please login to add items."));
        }
        // Extract user identifier from token (VERY basic - needs improvement for production)
        String userEmail = authService.activeTokens.get(token.replace("Bearer ", ""));
         if (userEmail == null) {
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid token."));
         }

        try {
            ItemDTO createdItem = itemService.createItem(addItemRequest, userEmail);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (IllegalArgumentException e) {
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (Exception e) {
            // Log the exception e
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to add item due to an internal error."));
        }
    }

    // Existing Bid Endpoint (moved from separate controller for simplicity here)
     @PostMapping("/{id}/bid")
    public ResponseEntity<?> placeBid(
            @PathVariable Long id,
            @RequestBody BidRequest bidRequest,
            @RequestHeader("Authorization") String token // Using simple token auth for demo
         ) {
        // Simple Auth Check
        if (!authService.isValidToken(token)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Please login to bid."));
        }
        String userEmail = authService.activeTokens.get(token.replace("Bearer ", ""));
         if (userEmail == null) {
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid token."));
         }

        try {
            // Note: Pass item ID, request body, and bidder's email
            return ResponseEntity.ok(bidService.placeBid(id, bidRequest, userEmail));
        } catch (EntityNotFoundException e) {
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new MessageResponse(e.getMessage()));
        } catch (IllegalArgumentException | IllegalStateException e) { // Catch validation errors
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new MessageResponse(e.getMessage()));
        } catch (Exception e) {
             // Log exception e
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to place bid due to an internal error."));
        }
    }
     // Endpoint to get bids for an item (useful for detail page)
    @GetMapping("/{id}/bids")
    public ResponseEntity<?> getBidsForItem(@PathVariable Long id) {
        try {
            return ResponseEntity.ok(bidService.getBidsForItem(id));
        } catch (Exception e) {
            // Log exception e
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new MessageResponse("Failed to retrieve bids."));
        }
    }
}
