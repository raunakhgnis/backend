package com.example.simpleauction.controller;

import com.example.simpleauction.dto.BidRequest;
import com.example.simpleauction.dto.MessageResponse;
import com.example.simpleauction.entity.Item;
import com.example.simpleauction.service.AuthService;
import com.example.simpleauction.service.ItemService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;


@RestController
@RequestMapping("/api/items")
public class ItemController {
    private final ItemService itemService;
    private final AuthService authService; // For simple auth check

    public ItemController(ItemService itemService, AuthService authService) {
        this.itemService = itemService;
        this.authService = authService;
    }

    @GetMapping
    public ResponseEntity<List<Item>> getItems() {
        // No auth check for viewing items in this simplified version
        return ResponseEntity.ok(itemService.getAllItems());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Item> getItem(@PathVariable Long id) {
        return itemService.getItemById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/{id}/bid")
    public ResponseEntity<?> placeBid(@PathVariable Long id, @RequestBody BidRequest bidRequest, @RequestHeader("Authorization") String token) {
        if (!authService.isValidToken(token)) {
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new MessageResponse("Unauthorized: Invalid or missing token."));
        }
        Optional<Item> itemOpt = itemService.getItemById(id);
        if (itemOpt.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        // In a real app: validate bid amount, check auction end time, update item's currentBid, save bid entity etc.
        System.out.println("Simulated Bid: Item ID " + id + ", Amount: " + bidRequest.getAmount() + ", by user via token.");
        return ResponseEntity.ok(new MessageResponse("Bid placed successfully (simulated)."));
    }
}
