package com.example.simpleauction.service;

import com.example.simpleauction.entity.Item;
import com.example.simpleauction.entity.User;
import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import jakarta.persistence.EntityNotFoundException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class PaymentService {

    private static final Logger logger = LoggerFactory.getLogger(PaymentService.class);

    private final ItemService itemService;
    private final RazorpayClient razorpayClient;

    public PaymentService(
            ItemService itemService,
            @Value("${razorpay.key.id}") String razorpayKeyId,
            @Value("${razorpay.key.secret}") String razorpayKeySecret
    ) throws RazorpayException {
        this.itemService = itemService;
        this.razorpayClient = new RazorpayClient(razorpayKeyId, razorpayKeySecret);
    }

    @Transactional
    public String createRazorpayOrder(Long itemId, User winningUser) throws RazorpayException {
        Item item = itemService.getItemEntityById(itemId);

        if (item.getAuctionEndTime() == null || LocalDateTime.now().isBefore(item.getAuctionEndTime())) {
            throw new IllegalStateException("Auction has not ended yet.");
        }
        if (item.getHighestBidder() == null || !item.getHighestBidder().getId().equals(winningUser.getId())) {
            throw new IllegalArgumentException("You are not the highest bidder for this item.");
        }
        if ("PAID".equalsIgnoreCase(item.getPaymentStatus())) {
            throw new IllegalStateException("This item has already been paid for.");
        }
        if ("PENDING".equalsIgnoreCase(item.getPaymentStatus())) {
            logger.info("Payment for item {} was PENDING. Creating new Razorpay order.", itemId);
        }

        BigDecimal amountInPaisa = item.getCurrentBidPrice() != null ?
                                   item.getCurrentBidPrice().multiply(new BigDecimal("100")) :
                                   new BigDecimal("0");

        if (amountInPaisa.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Invalid amount for payment.");
        }

        JSONObject orderRequest = new JSONObject();
        orderRequest.put("amount", amountInPaisa.intValue());
        orderRequest.put("currency", "INR");
        orderRequest.put("receipt", "receipt_item_" + item.getId() + "_" + System.currentTimeMillis());
        orderRequest.put("payment_capture", 1);

        JSONObject notes = new JSONObject();
        notes.put("itemId", item.getId().toString());
        notes.put("itemName", item.getName());
        notes.put("userId", winningUser.getId().toString());
        notes.put("userEmail", winningUser.getEmail());
        orderRequest.put("notes", notes);

        Order order = razorpayClient.orders.create(orderRequest);
        logger.info("Razorpay Order created: ID={}, Amount={}, ItemID={}", order.get("id"), order.get("amount"), item.getId());

        item.setPaymentStatus("PENDING_RAZORPAY_ORDER_" + order.get("id"));
        itemService.itemRepository.save(item);

        return order.get("id");
    }

    @Transactional
    public void handlePaymentSuccess(String razorpayOrderId, String razorpayPaymentId, String razorpaySignature) {
        logger.info("Webhook received for successful payment. Razorpay Order ID: {}, Payment ID: {}", razorpayOrderId, razorpayPaymentId);

        List<Item> items = itemService.itemRepository.findAll();
        Item paidItem = null;
        for(Item item : items) {
            if (item.getPaymentStatus() != null && item.getPaymentStatus().equals("PENDING_RAZORPAY_ORDER_" + razorpayOrderId)) {
                paidItem = item;
                break;
            }
        }

        if (paidItem != null) {
            paidItem.setPaymentStatus("PAID");
            paidItem.setPaymentGatewayTransactionId(razorpayPaymentId);
            itemService.itemRepository.save(paidItem);
            logger.info("Item ID: {} marked as PAID. Razorpay Payment ID: {}", paidItem.getId(), razorpayPaymentId);
        } else {
            logger.warn("Could not find item associated with Razorpay Order ID: {} in webhook.", razorpayOrderId);
        }
    }

     @Transactional
    public void handlePaymentFailure(String razorpayOrderId, String description) {
        logger.error("Webhook received for failed payment. Razorpay Order ID: {}, Description: {}", razorpayOrderId, description);
        List<Item> items = itemService.itemRepository.findAll();
        Item failedItem = null;
        for(Item item : items) {
             if (item.getPaymentStatus() != null && item.getPaymentStatus().equals("PENDING_RAZORPAY_ORDER_" + razorpayOrderId)) {
                failedItem = item;
                break;
            }
        }
        if (failedItem != null) {
            failedItem.setPaymentStatus("FAILED_RAZORPAY");
            itemService.itemRepository.save(failedItem);
        } else {
             logger.warn("Could not find item for failed payment. Razorpay Order ID: {}", razorpayOrderId);
        }
    }
}