package com.example.simpleauction.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;

@Entity
@Table(name = "items")
public class Item {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(length = 1000)
    private String description;

    @Column(nullable = false)
    private BigDecimal startingPrice;

    private BigDecimal currentBidPrice;

    @Column(nullable = false)
    private String category;

    private String imageUrl;

    @Column(nullable = false)
    private LocalDateTime auctionEndTime;

    @Column(nullable = true) // Payment status can be null initially
    private String paymentStatus; // e.g., "PENDING", "PAID", "FAILED"

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "seller_id", nullable = false)
    private User seller;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "highest_bidder_id", nullable = true)
    private User highestBidder;

    // --- Constructors ---
    /**
     * Default constructor required by JPA.
     */
    public Item() {
    }

    /**
     * Constructor for data initialization / creation.
     */
    public Item(String name, String description, BigDecimal startingPrice, String category, String imageUrl, LocalDateTime endTime, User seller) {
        this.name = name;
        this.description = description;
        this.startingPrice = startingPrice;
        this.currentBidPrice = startingPrice; // Initialize
        this.category = category;
        this.imageUrl = imageUrl;
        this.auctionEndTime = endTime;
        this.seller = seller;
        this.paymentStatus = null; // Default status
    }

    // --- Getters and Setters ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public BigDecimal getStartingPrice() { return startingPrice; }
    public void setStartingPrice(BigDecimal startingPrice) { this.startingPrice = startingPrice; }
    public BigDecimal getCurrentBidPrice() { return currentBidPrice; }
    public void setCurrentBidPrice(BigDecimal currentBidPrice) { this.currentBidPrice = currentBidPrice; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    public LocalDateTime getAuctionEndTime() { return auctionEndTime; }
    public void setAuctionEndTime(LocalDateTime auctionEndTime) { this.auctionEndTime = auctionEndTime; }
    public String getPaymentStatus() { return paymentStatus; }
    public void setPaymentStatus(String paymentStatus) { this.paymentStatus = paymentStatus; }
    public User getSeller() { return seller; }
    public void setSeller(User seller) { this.seller = seller; }
    public User getHighestBidder() { return highestBidder; }
    public void setHighestBidder(User highestBidder) { this.highestBidder = highestBidder; }

    // --- equals, hashCode, toString ---
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Item item = (Item) o;
        return Objects.equals(id, item.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

     @Override
    public String toString() {
        return "Item{" +
               "id=" + id +
               ", name='" + name + '\'' +
               ", category='" + category + '\'' +
               ", paymentStatus='" + paymentStatus + '\'' +
               '}';
    }
}