package com.example.simpleauction.service;

import com.example.simpleauction.dto.BidDTO;
import com.example.simpleauction.dto.BidRequest; // Assuming you have BidRequest DTO
import com.example.simpleauction.entity.Bid;
import com.example.simpleauction.entity.Item;
import com.example.simpleauction.entity.User;
import com.example.simpleauction.repository.BidRepository;
import com.example.simpleauction.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // Use Spring's Transactional

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class BidService {

    private final BidRepository bidRepository;
    private final UserRepository userRepository;
    private final ItemService itemService; // Inject ItemService to get Item entities

    public BidService(BidRepository bidRepository, UserRepository userRepository, ItemService itemService) {
        this.bidRepository = bidRepository;
        this.userRepository = userRepository;
        this.itemService = itemService;
    }

    @Transactional
    public BidDTO placeBid(Long itemId, BidRequest bidRequest, String bidderEmail) {
        User bidder = userRepository.findByEmail(bidderEmail)
                .orElseThrow(() -> new EntityNotFoundException("Bidder not found with email: " + bidderEmail));

        Item item = itemService.getItemEntityById(itemId); // Get managed entity

        // --- Validation ---
        if (LocalDateTime.now().isAfter(item.getAuctionEndTime())) {
            throw new IllegalStateException("Auction has ended for item: " + item.getName());
        }
        if (item.getSeller().getId().equals(bidder.getId())) {
            throw new IllegalArgumentException("Seller cannot bid on their own item.");
        }
        BigDecimal currentPrice = item.getCurrentBidPrice() != null ? item.getCurrentBidPrice() : item.getStartingPrice();
        if (bidRequest.getAmount().compareTo(currentPrice) <= 0) {
            throw new IllegalArgumentException("Bid amount must be higher than the current price of $" + currentPrice);
        }
        // --- End Validation ---

        Bid bid = new Bid(item, bidder, bidRequest.getAmount(), LocalDateTime.now());
        Bid savedBid = bidRepository.save(bid);

        // Update item's current highest bid and bidder
        itemService.updateHighestBidder(itemId, bidder, bidRequest.getAmount());


        return convertToDto(savedBid);
    }

    public List<BidDTO> getBidsByUserEmail(String email) {
         User bidder = userRepository.findByEmail(email)
                .orElseThrow(() -> new EntityNotFoundException("User not found with email: " + email));
        return bidRepository.findByBidderOrderByBidTimeDesc(bidder).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

     public List<BidDTO> getBidsForItem(Long itemId) {
        return bidRepository.findByItemIdOrderByBidAmountDesc(itemId).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    // --- Helper Method ---

    private BidDTO convertToDto(Bid bid) {
        BidDTO dto = new BidDTO();
        dto.setId(bid.getId());
        dto.setBidAmount(bid.getBidAmount());
        dto.setBidTime(bid.getBidTime());
        if (bid.getBidder() != null) {
            dto.setBidderEmail(bid.getBidder().getEmail());
        }
        if (bid.getItem() != null) {
            dto.setItemId(bid.getItem().getId());
            dto.setItemName(bid.getItem().getName()); // Include item name
        }
        return dto;
    }
}

